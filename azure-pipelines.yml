# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  RT_SECRET: $(RT_TOKEN)
  APP_VERSION: 1.0.0
  PYTHON_REPO: urs-python
  GENERIC_REPO: urs-generic
  DOCKER_REG: yann-swampup.dev.aws.devopsacc.team
  DOCKER_REPO: urs-docker
  BUILD_INFO_WEBAPP: $(Build.DefinitionName)-ado
  BUILD_INFO_DOCKER: docker-$(Build.DefinitionName)-ado

trigger:
- main

pool:
  vmImage: ubuntu-latest

jobs:
- job: python_webapp
  steps:
  - task: ArtifactoryPip@1
    inputs:
      artifactoryService: 'yann_swampup'
      command: 'install'
      arguments: '-r src/requirements.txt --no-cache-dir'
      targetResolveRepo: $(PYTHON_REPO)
      collectBuildInfo: true
      buildName: $(BUILD_INFO_WEBAPP)
      buildNumber: '$(Build.BuildNumber)'
      noPipCache: true
    displayName: 'Download dependencies'

  - script: cd src && tar -czvf webapp_python_azure_$(Build.SourceVersion).tar.gz *.yaml *.txt *.py
    displayName: 'Package webapp'
    
  - task: ArtifactoryGenericUpload@2
    inputs:
      artifactoryService: 'yann_swampup'
      specSource: 'taskConfiguration'
      fileSpec: |
        {
          "files": [
            {
              "pattern": "src/webapp_python_azure_$(Build.SourceVersion).tar.gz",
              "target": "${TARGET_REPO}/"
            }
          ]
        }
      # showing off placeholder in FileSpec (not mandatory ...)
      replaceSpecVars: true
      specVars: TARGET_REPO=$(GENERIC_REPO)
      collectBuildInfo: true
      buildName: $(BUILD_INFO_WEBAPP)
      buildNumber: '$(Build.BuildNumber)'
      failNoOp: true
    displayName: 'Upload webapp'

  - task: ArtifactoryPublishBuildInfo@1
    inputs:
      artifactoryService: 'yann_swampup'
      buildName: $(BUILD_INFO_WEBAPP)
      buildNumber: '$(Build.BuildNumber)'
    displayName: 'Publish Build Info'

  - task: ArtifactoryXrayScan@1
    inputs:
      artifactoryService: 'yann_swampup'
      buildName: $(BUILD_INFO_WEBAPP)
      buildNumber: '$(Build.BuildNumber)'
      allowFailBuild: false
    displayName: 'Scan Build Info'

  - task: ArtifactoryProperties@1
    inputs:
      command: 'set'
      artifactoryService: 'yann_swampup'
      setProps: 'version=$(APP_VERSION)'
      specSource: 'taskConfiguration'
      fileSpec: |
        {
          "files": [
            {
              "pattern": "$(GENERIC_REPO)/webapp_python_azure_$(Build.SourceVersion).tar.gz"
            }
          ]
        }
    displayName: 'Set properties'

  - task: ArtifactoryBuildPromotion@1
    inputs:
      artifactoryService: 'yann_swampup'
      buildName: $(BUILD_INFO_WEBAPP)
      buildNumber: '$(Build.BuildNumber)'
      targetRepo: 'urs-generic-release-local'
      status: 'XRAY_SCAN_OK'
      comment: 'passed Xray Scan'
      sourceRepo: 'urs-generic-dev-local'
      includeDependencies: false
      copy: false
      dryRun: false
    displayName: 'Promote Build Info'

- job: python_docker
  dependsOn:
  - python_webapp
  steps:
  - task: DockerInstaller@0
    inputs:
      dockerVersion: '17.09.0-ce'
    displayName: 'Install Docker'
  - task: ArtifactoryGenericDownload@3
    inputs:
      connection: 'yann_swampup'
      specSource: 'taskConfiguration'
      fileSpec: |
        {
          "files": [
            {
              "pattern": "$(GENERIC_REPO)/",
              "props" : "version=$(APP_VERSION)",
              "target": "src/webapp_python.tar.gz"
            }
          ]
        }
      collectBuildInfo: true
      buildName: $(BUILD_INFO_DOCKER)
      buildNumber: '$(Build.BuildNumber)'
      failNoOp: true
    displayName: 'Download webapp'

  - script: |
      docker images
      ls -l src
    displayName: 'Check up '

  - task: Docker@2
    inputs:
      containerRegistry: 'yann_swampup_docker'
      repository: $(DOCKER_REPO)
      command: 'build'
      Dockerfile: 'src/Dockerfile'
      arguments: '-t $(DOCKER_REG)/$(DOCKER_REPO)/azure-python-webapp:$(APP_VERSION) --build-arg RT_TOKEN=$(RT_SECRET)'
    displayName: 'Build Docker image'

  - task: ArtifactoryDocker@1
    inputs:
      command: 'push'
      artifactoryService: 'yann_swampup'
      targetRepo: $(DOCKER_REPO)
      imageName: '$(DOCKER_REG)/$(DOCKER_REPO)/azure-python-webapp:$(APP_VERSION)'
      collectBuildInfo: true
      buildName: $(BUILD_INFO_DOCKER)
      buildNumber: '$(Build.BuildNumber)'
      includeEnvVars: true
    displayName: 'Push Docker image'

  - task: ArtifactoryPublishBuildInfo@1
    inputs:
      artifactoryService: 'yann_swampup'
      buildName: $(BUILD_INFO_DOCKER)
      buildNumber: '$(Build.BuildNumber)'
    displayName: 'Publish Docker Build Info'

  - task: ArtifactoryXrayScan@1
    inputs:
      artifactoryService: 'yann_swampup'
      buildName: $(BUILD_INFO_DOCKER)
      buildNumber: '$(Build.BuildNumber)'
      allowFailBuild: false
    displayName: 'Scan Docker Build Info'

  - task: ArtifactoryBuildPromotion@1
    inputs:
      artifactoryService: 'yann_swampup'
      buildName: $(BUILD_INFO_DOCKER)
      buildNumber: '$(Build.BuildNumber)'
      targetRepo: 'urs-docker-release-local'
      status: 'XRAY_SCAN_OK'
      comment: 'passed Xray Scan'
      sourceRepo: 'urs-docker-dev-local'
      includeDependencies: false
      copy: false
      dryRun: false
    displayName: 'Promote Docker Build Info'
