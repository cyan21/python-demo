# This is a basic workflow to help you get started with Actions

name: python-webapp

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ gha ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET_1 }}
      APP_VERSION: 2.0.0
      JFROG_BUILD_STATUS: PASS
      PYTHON_VERSION: 3.9
      PYTHON_REPO: urs-python
      GENERIC_REPO: urs-generic
      DOCKER_REG: yann-swampup.dev.aws.devopsacc.team
      DOCKER_REPO: urs-docker
      DOCKER_USER: admin
    steps:
      - uses: actions/checkout@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1.2.0
#        with:
#          version: 2.1.1
    
      # - name: Set up Python ${{ env.PYTHON_VERSION }}
      #   uses: actions/setup-python@v2.2.2
      #   with:
      #     python-version: ${{ env.PYTHON_VERSION }}

      # - name: Ping Artifactory
      #   run: |
      #       jfrog --version
      #       jfrog config show
      #       jfrog rt ping
            
      # - name: Configure JFrog CLI and PIP client
      #   run: jfrog rt pip-config --repo-resolve ${{ env.PYTHON_REPO }} --server-id-resolve yann-swampup

      # - name: Install dependencies
      #   run: jfrog rt pip-install -r src/requirements.txt --no-cache-dir  --build-name=$JFROG_CLI_BUILD_NAME --build-number=$JFROG_CLI_BUILD_NUMBER --module=python_webapp

      # - name: Package and upload webapp
      #   run: |
      #     tar -czvf webapp_python_gha_${{ github.sha }}.tar.gz src/*.yaml src/*.txt src/*.py
      #     jfrog rt upload webapp_python_gha_${{ github.sha }}.tar.gz ${{ env.GENERIC_REPO }} --target-props "maturity=release-candidate;platform=windows,linux;qa.status=ready" --build-name $JFROG_CLI_BUILD_NAME --build-number $JFROG_CLI_BUILD_NUMBER --module=python_webapp
        
      # - name: Publish Build Info
      #   run: |
      #     # Collect environment variables for the build
      #     jfrog rt bce 
      #     # Collect VCS details from git and add them to the build
      #     jfrog rt bag
      #     # Publish build info
      #     jfrog rt bp

      # - name: Set properties
      #   run: jfrog rt sp --build $JFROG_CLI_BUILD_NAME/$JFROG_CLI_BUILD_NUMBER ${{ env.GENERIC_REPO }}/ "qa.status=wip;version=${{ env.APP_VERSION }}"

      # - name: Scan Build 
      #   run: jfrog rt bs --fail=false

      # - name: Promote Build 
      #   run: jfrog rt bpr  --comment "promoted to the next level"

      - name: Download webapp
        run: |
          jfrog rt download --build $JFROG_CLI_BUILD_NAME/11  ${{ env.GENERIC_REPO }} webapp_python.tar.gz

      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.DOCKER_REG }}
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.RT_SECRET }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v2.6.1
        with:
          build-args: "RT_TOKEN=${{ secrets.RT_SECRET }}"
          context: src/
          tags: ${{ env.DOCKER_REG }}/${{ env.DOCKER_REPO }}/gha-python-webapp:${{ env.APP_VERSION }}
