pipelines:
  - name: webapp_python
    configuration:
      environmentVariables:
        readOnly:
          dockerRepo: yann-sbx.dev.gcp.devopsacc.team/urs-docker
          pythonRepo: urs-python
          genericRepo: urs-generic
          genericPromotionRepo: urs-generic-release-local
          skipScan: "true"
    steps:
      - name: build_webapp_python
        type: Bash
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_NAME: "{{ gitBranch }}_webapp_python"
            JFROG_CLI_BUILD_NUMBER: ${run_number}
            JFROG_CLI_BUILD_URL: "${step_url}${res_src_code_webapp_python_branchName}"
            JFROG_CLI_LOG_LEVEL: DEBUG
          # runtime:
          #   type: image
          #   image:
          #     custom:
          #       name: ${dockerRepo}/python-jfrog
          #       tag: 1.0.0
          #       ## remove the longest string matching "*/" starting from the left
          #       # sourceRepository: ${dockerRepo##*/}
          #       sourceRepository: urs-docker
          #       registry: artifactory_docker
          inputResources:
            - name: src_code_webapp_python
            # - name: my_runtime_image4
          outputResources:
            - name: bi_webapp_python
          integrations:
            - name: artifactory_docker
            - name: artifactory_eu 
        execution:
          onStart:
            - python3 --version
            - pip3 --version
            # - jf --version 
            - jfrog --version 
            - cd ${res_src_code_webapp_python_resourcePath}/src && ls -l
            - git branch
            - jfrog config add --url=${int_artifactory_eu_url%/artifactory} --user="${int_artifactory_eu_user}" --password=${int_artifactory_eu_apikey} --interactive=false  art1 && jfrog config show
            - jfrog rt pip-config --repo-resolve ${pythonRepo} --server-id-resolve art1
            - jfrog rt c show
            # - jf config add --url=${int_artifactory_eu_url%/artifactory} --user="${int_artifactory_eu_user}" --password=${int_artifactory_eu_apikey} --interactive=false  art1 && jf config show
            # - jf pip-config --repo-resolve ${pythonRepo} --server-id-resolve art1
            # - jf c show
          onExecute:
            - jfrog rt pip-install -r requirements.txt --no-cache-dir --module=python
            - tar -czvf webapp_python.tar.gz *.yaml *.txt *.py
            - jfrog rt upload webapp_python.tar.gz ${genericRepo}  --module=python
            - jfrog rt bce 
            - jfrog rt bag
            - jfrog rt bp  
            # - jf pip install -r requirements.txt --no-cache-dir --module=python
            # - tar -czvf webapp_python.tar.gz *.yaml *.txt *.py
            # - jf rt upload webapp_python.tar.gz ${genericRepo}  --module=python
            # - jf rt bce 
            # - jf rt bag
            # - jf rt bp  
          onSuccess:
            - | 
              if [ ${res_src_code_webapp_python_isGitTag} == 'True' ]; then 
                add_run_variables runVarAppVersion=${res_src_code_webapp_python_gitTagName}
              else
                add_run_variables runVarAppVersion=${res_src_code_webapp_python_commitSha}
              fi
            - echo ${runVarAppVersion}

      - name: scan_webapp_python
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_webapp_python
              trigger: true
        execution:
          onStart:
            - if [ "${skipScan}" == "true" ]; then echo Skipping scan_backapp_mvn step; exit 0; fi

      - name: promote_bi_webapp_python
        type: PromoteBuild
        configuration:
          targetRepository: ${genericPromotionRepo}
          includeDependencies: false
          status: XRAY_SCAN_OK
          comment: build passed Xray Scan
          copy: false
          inputSteps:
            - name: build_webapp_python
          inputResources:
            - name: bi_webapp_python
          outputResources:
            - name: bi_webapp_python_promoted
            - name: pb_webapp_python
        execution:  
          onSuccess:
            - write_output pb_webapp_python appVersion=${runVarAppVersion}

  - name: webapp_python_docker
    configuration:
      environmentVariables:
        readOnly:
          dockerRepo: yann-sbx.dev.gcp.devopsacc.team/urs-docker
          skipScan: "true"
    steps:
      # need this step to export the appVersion for the Filespec Resource
      - name: export_variables
        type: Bash
        configuration:
          inputResources:
            - name: pb_webapp_python
        execution:
          onExecute:
            - add_run_variables runVarAppVersion=${res_pb_webapp_python_appVersion}

      - name: build_webapp_python_docker
        type: DockerBuild
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_NAME: "{{ gitBranch }}_webapp_python_docker"
            JFROG_CLI_BUILD_URL: "${step_url}${res_src_code_webapp_python_branchName}"
            JFROG_CLI_LOG_LEVEL: INFO
          dockerFileName: Dockerfile
          dockerFileLocation: src
          dockerImageName: ${dockerRepo}/webapp-python-docker
          dockerImageTag: ${runVarAppVersion}
          inputSteps:
              - name: export_variables
          inputResources:
            - name: src_dockerfile_webapp_python
            - name: fs_webapp_python
          integrations:
            - name: artifactory_eu
            - name: artifactory_docker
        execution:
          onStart:
            - ls -la ${res_fs_webapp_python_resourcePath}
            - echo ${res_src_dockerfile_webapp_python_resourcePath}
            - ls -la  ${res_src_dockerfile_webapp_python_resourcePath}
            - >-
              cp
              ${res_fs_webapp_python_resourcePath}/webapp_python.tar.gz
              ${res_src_dockerfile_webapp_python_resourcePath}/src/
            - ls -l  ${res_src_dockerfile_webapp_python_resourcePath}/src/
            - echo "it's tuesday"

      - name: publish_webapp_python_docker
        type: DockerPush
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_NAME: "{{ gitBranch }}_webapp_python_docker"
            JFROG_CLI_BUILD_URL: "${step_url}{{ gitBranch }}"
            JFROG_CLI_LOG_LEVEL: INFO
          affinityGroup: together
          targetRepository: urs-docker-dev-local
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_webapp_python_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_webapp_python_docker

      - name: scan_webapp_python_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_webapp_python_docker
              trigger: true
        execution:
          onStart:
            - if [ "${skipScan}" == "true" ]; then echo Skipping scan_backapp_mvn step; exit 0; fi

      - name: promote_bi_webapp_python_docker
        type: PromoteBuild
        configuration:
          targetRepository: urs-docker-rc-local
          includeDependencies: false
          status: SCAN_OK
          comment: Xray scan OK
          copy: false
          inputSteps:
            - name: scan_webapp_python_docker
          inputResources:
            - name: bi_webapp_python_docker
          outputResources:
            - name: bi_webapp_python_docker_promoted
